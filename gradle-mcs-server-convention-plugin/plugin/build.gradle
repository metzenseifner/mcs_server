/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.15.2'
}
version = '1.0.5'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {

    implementation 'biz.aQute.bnd:biz.aQute.bnd.gradle:5.2.0'
    implementation 'com.github.lburgazzoli:gradle-karaf-plugin:0.5.2'
    //maven2/com/github/lburgazzoli/gradle-karaf-plugin/0.5.2/

    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.13'
}

gradlePlugin {
    // Define the plugin
    plugins {
        mcsConvention {
            id = 'mcs.convention.plugin.standard' // contributes to path in repo
            implementationClass = 'mcs.convention.plugin.McsConventionPlugin' // base is ${buildDir}/libs/${name}-${version}.jar
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

/**
 * Setup publishing to maven repository.
 *
 * Note that the an afterEvaluate{} block must be used
 * to access anything that was set in the configuration phase. This includes all of the properties.
 * The documentation introduced confusion with the word "project evaluation"
 * which just means after the configuration phase.
 *
 */
publishing {
    // org.gradle.api.publish.PublishingExtension (static String NAME: "publishing"); void publicationsâ€‹(Action<? super PublicationContainer> configure)
    publications {
        // org.gradle.api.publish.PublicationContainer publications(Action<? super PublicationContainer> configure
        gradleMcsConventionPlugin(MavenPublication) {
            /**
             * default mapping:
             * - groupId: project.group
             * - artifactId: project.name
             * - version: project.version
             */
            from components.java // represents all components (jars; mcs-connect-server-x.y.z.jar)
        }
    }
    repositories { // repositories(Action<? super RepositoryHandler> configure
        mavenLocal()
        maven {
            def releasesRepoUrl = "${nexusUrlBase}/repository/maven-releases"
            def snapshotsRepoUrl = "${nexusUrlBase}/repository/maven-snapshots"
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username "$nexusUsername"
                password "$nexusPassword"
            }
        }
    }
}


artifactory {
    clientConfig.setIncludeEnvVars(true)
    contextUrl = "${artifactoryContextUrl}"

    publish {
        repository {
            repoKey = project.hasProperty('release') ? "" : "${artifactorySnapshotRepoKey}"
            username = "${artifactoryUsername}"
            password = readArtifactoryPassword()
            maven = true
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory. publishing.publications.mcsConnectMaven(MavenPublication
            publications('gradleMcsConventionPlugin')
            publishArtifacts = true
            publishPom = true
        }
    }
}

task printMyProjectsMavenCoordinates {
    doLast {
        println "groupId:artifactId:version"
        println "${project.group}:${project.name}:${project.version}"
    }
}